{"ast":null,"code":"import * as actionTypes from \"./actions\"; // js object that i wanna use as a initial state\n\nconst initialState = {\n  counter: 0,\n  results: []\n}; //fall back on initialstate\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      //make new object out of state\n      const newState = Object.assign({}, state);\n      newState.counter = state.counter + 1;\n      return newState;\n\n    case actionTypes.DECREMENT:\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    case actionTypes.ADD:\n      return { ...state,\n        counter: state.counter + action.value\n      };\n\n    case actionTypes.SUB:\n      return { ...state,\n        counter: state.counter - action.value\n      };\n\n    case actionTypes.STORE_RESULT:\n      return { ...state,\n        results: state.results.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      };\n\n    case actionTypes.DELETE_RESULT:\n      // # option 1:\n      // const id = 2;\n      // const newArray = [...state.results]\n      // newArray.splice(id, 1)\n      // # option 2:\n      const updatedArray = state.results.filter((result, index) => result.id !== action.resultId);\n      return { ...state,\n        results: updatedArray\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/Redux/src/store/reducer.js"],"names":["actionTypes","initialState","counter","results","reducer","state","action","type","INCREMENT","newState","Object","assign","DECREMENT","ADD","value","SUB","STORE_RESULT","concat","id","Date","DELETE_RESULT","updatedArray","filter","result","index","resultId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,CADW;AAEpBC,EAAAA,OAAO,EAAE;AAFW,CAArB,C,CAKA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKP,WAAW,CAACQ,SAAjB;AACC;AACA,YAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,CAAjB;AACAI,MAAAA,QAAQ,CAACP,OAAT,GAAmBG,KAAK,CAACH,OAAN,GAAgB,CAAnC;AACA,aAAOO,QAAP;;AACD,SAAKT,WAAW,CAACY,SAAjB;AACC,aAAO,EAAE,GAAGP,KAAL;AAAYH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAArC,OAAP;;AACD,SAAKF,WAAW,CAACa,GAAjB;AACC,aAAO,EAAE,GAAGR,KAAL;AAAYH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACQ;AAA5C,OAAP;;AACD,SAAKd,WAAW,CAACe,GAAjB;AACC,aAAO,EAAE,GAAGV,KAAL;AAAYH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACQ;AAA5C,OAAP;;AACD,SAAKd,WAAW,CAACgB,YAAjB;AACC,aAAO,EACN,GAAGX,KADG;AAENF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcc,MAAd,CAAqB;AAAEC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,EAAN;AAAkBL,UAAAA,KAAK,EAAET,KAAK,CAACH;AAA/B,SAArB;AAFH,OAAP;;AAID,SAAKF,WAAW,CAACoB,aAAjB;AACC;AACA;AACA;AACA;AAEA;AACA,YAAMC,YAAY,GAAGhB,KAAK,CAACF,OAAN,CAAcmB,MAAd,CACpB,CAACC,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACL,EAAP,KAAcZ,MAAM,CAACmB,QADpB,CAArB;AAGA,aAAO,EACN,GAAGpB,KADG;AAENF,QAAAA,OAAO,EAAEkB;AAFH,OAAP;;AAID;AACC,aAAOhB,KAAP;AAhCF;AAkCA,CAnCD;;AAqCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from \"./actions\"\n\n// js object that i wanna use as a initial state\nconst initialState = {\n\tcounter: 0,\n\tresults: [],\n}\n\n//fall back on initialstate\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.INCREMENT:\n\t\t\t//make new object out of state\n\t\t\tconst newState = Object.assign({}, state)\n\t\t\tnewState.counter = state.counter + 1\n\t\t\treturn newState\n\t\tcase actionTypes.DECREMENT:\n\t\t\treturn { ...state, counter: state.counter - 1 }\n\t\tcase actionTypes.ADD:\n\t\t\treturn { ...state, counter: state.counter + action.value }\n\t\tcase actionTypes.SUB:\n\t\t\treturn { ...state, counter: state.counter - action.value }\n\t\tcase actionTypes.STORE_RESULT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tresults: state.results.concat({ id: new Date(), value: state.counter }),\n\t\t\t}\n\t\tcase actionTypes.DELETE_RESULT:\n\t\t\t// # option 1:\n\t\t\t// const id = 2;\n\t\t\t// const newArray = [...state.results]\n\t\t\t// newArray.splice(id, 1)\n\n\t\t\t// # option 2:\n\t\t\tconst updatedArray = state.results.filter(\n\t\t\t\t(result, index) => result.id !== action.resultId\n\t\t\t)\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tresults: updatedArray,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}