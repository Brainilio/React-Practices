{"ast":null,"code":"import * as actionTypes from \"../actions\"; // js object that i wanna use as a initial state\n\nconst initialState = {\n  results: []\n}; //fall back on initialstate\n\nconst results_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.STORE_RESULT:\n      return { ...state,\n        results: state.results.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      };\n\n    case actionTypes.DELETE_RESULT:\n      // # option 1:\n      // const id = 2;\n      // const newArray = [...state.results]\n      // newArray.splice(id, 1)\n      // # option 2:\n      const updatedArray = state.results.filter((result, index) => result.id !== action.resultId);\n      return { ...state,\n        results: updatedArray\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default results_reducer;","map":{"version":3,"sources":["/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/Redux/src/store/reducers/result.js"],"names":["actionTypes","initialState","results","results_reducer","state","action","type","STORE_RESULT","concat","id","Date","value","counter","DELETE_RESULT","updatedArray","filter","result","index","resultId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE;AADW,CAArB,C,CAIA;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKN,WAAW,CAACO,YAAjB;AACC,aAAO,EACN,GAAGH,KADG;AAENF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcM,MAAd,CAAqB;AAAEC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,EAAN;AAAkBC,UAAAA,KAAK,EAAEP,KAAK,CAACQ;AAA/B,SAArB;AAFH,OAAP;;AAID,SAAKZ,WAAW,CAACa,aAAjB;AACC;AACA;AACA;AACA;AAEA;AACA,YAAMC,YAAY,GAAGV,KAAK,CAACF,OAAN,CAAca,MAAd,CACpB,CAACC,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACP,EAAP,KAAcJ,MAAM,CAACa,QADpB,CAArB;AAGA,aAAO,EACN,GAAGd,KADG;AAENF,QAAAA,OAAO,EAAEY;AAFH,OAAP;;AAID;AACC,aAAOV,KAAP;AArBF;AAuBA,CAxBD;;AA0BA,eAAeD,eAAf","sourcesContent":["import * as actionTypes from \"../actions\"\n\n// js object that i wanna use as a initial state\nconst initialState = {\n\tresults: [],\n}\n\n//fall back on initialstate\nconst results_reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.STORE_RESULT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tresults: state.results.concat({ id: new Date(), value: state.counter }),\n\t\t\t}\n\t\tcase actionTypes.DELETE_RESULT:\n\t\t\t// # option 1:\n\t\t\t// const id = 2;\n\t\t\t// const newArray = [...state.results]\n\t\t\t// newArray.splice(id, 1)\n\n\t\t\t// # option 2:\n\t\t\tconst updatedArray = state.results.filter(\n\t\t\t\t(result, index) => result.id !== action.resultId\n\t\t\t)\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tresults: updatedArray,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default results_reducer\n"]},"metadata":{},"sourceType":"module"}