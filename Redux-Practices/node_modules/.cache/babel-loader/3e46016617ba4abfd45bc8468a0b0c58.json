{"ast":null,"code":"var _jsxFileName = \"/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/Redux-Practices/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport counterReducer from \"./store/reducers/counter\";\nimport resultReducer from \"./store/reducers/result\"; //MERGE REDUCERS\n\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n}); //log store and middleware\n\nconst logger = store => {\n  return next => {\n    return action => {\n      console.log(\"[MIDDLEWARE] Dispatching\", action); //let action pass to reducer\n\n      const result = next(action);\n      console.log(\"[MIDDLEWARE] next state\", store.getState());\n      return result;\n    };\n  };\n}; //create redux store and callback the reducer + middleware\n\n\nconst store = createStore(rootReducer, applyMiddleware(logger));\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }\n})), document.getElementById(\"root\"));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/Redux-Practices/src/index.js"],"names":["React","ReactDOM","App","registerServiceWorker","createStore","combineReducers","applyMiddleware","Provider","counterReducer","resultReducer","rootReducer","ctr","res","logger","store","next","action","console","log","result","getState","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,yBAA1B,C,CAEA;;AACA,MAAMC,WAAW,GAAGL,eAAe,CAAC;AACnCM,EAAAA,GAAG,EAAEH,cAD8B;AAEnCI,EAAAA,GAAG,EAAEH;AAF8B,CAAD,CAAnC,C,CAKA;;AACA,MAAMI,MAAM,GAAIC,KAAD,IAAW;AACzB,SAAQC,IAAD,IAAU;AAChB,WAAQC,MAAD,IAAY;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,MAAxC,EADkB,CAElB;;AACA,YAAMG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,KAAK,CAACM,QAAN,EAAvC;AACA,aAAOD,MAAP;AACA,KAND;AAOA,GARD;AASA,CAVD,C,CAYA;;;AACA,MAAML,KAAK,GAAGV,WAAW,CAACM,WAAD,EAAcJ,eAAe,CAACO,MAAD,CAA7B,CAAzB;AAEAZ,QAAQ,CAACoB,MAAT,eACC,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD,EAICQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJD;AAMApB,qBAAqB","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport registerServiceWorker from \"./registerServiceWorker\"\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"\nimport { Provider } from \"react-redux\"\nimport counterReducer from \"./store/reducers/counter\"\nimport resultReducer from \"./store/reducers/result\"\n\n//MERGE REDUCERS\nconst rootReducer = combineReducers({\n\tctr: counterReducer,\n\tres: resultReducer,\n})\n\n//log store and middleware\nconst logger = (store) => {\n\treturn (next) => {\n\t\treturn (action) => {\n\t\t\tconsole.log(\"[MIDDLEWARE] Dispatching\", action)\n\t\t\t//let action pass to reducer\n\t\t\tconst result = next(action)\n\t\t\tconsole.log(\"[MIDDLEWARE] next state\", store.getState())\n\t\t\treturn result\n\t\t}\n\t}\n}\n\n//create redux store and callback the reducer + middleware\nconst store = createStore(rootReducer, applyMiddleware(logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n)\nregisterServiceWorker()\n"]},"metadata":{},"sourceType":"module"}