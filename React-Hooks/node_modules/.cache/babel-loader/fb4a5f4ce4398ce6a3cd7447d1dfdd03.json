{"ast":null,"code":"var _jsxFileName = \"/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/React-Hooks/src/components/Ingredients/Ingredients.js\";\nimport React, { useMemo } from \"react\";\nimport IngredientForm from \"./IngredientForm\";\nimport IngredientList from \"./IngredientList\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Search from \"./Search\";\nimport useHttp from '../../hooks/http';\n\nconst ingredientReducer = (currentIngs, action) => {\n  switch (action.type) {\n    case \"SET\":\n      return action.ingredients;\n\n    case \"ADD\":\n      return [...currentIngs, action.newIngredient];\n\n    case \"DELETE\":\n      return currentIngs.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error(\"Should not get there!\");\n  }\n};\n\nconst Ingredients = () => {\n  const [ingredients, dispatch] = React.useReducer(ingredientReducer, []);\n  const {\n    isLoading,\n    error,\n    data,\n    sendRequest\n  } = useHttp();\n  React.useEffect(() => {\n    console.log(\"Rendering ingredients\", ingredients);\n  }, [ingredients]);\n  const filteredIngredientsHandler = React.useCallback(filterIg => {\n    // setIngredients(filterIg)\n    dispatch({\n      type: \"SET\",\n      ingredients: filterIg\n    });\n  }, []);\n  const addIngredientHandler = React.useCallback(ingredient => {// httpdispatch({ type: \"START\" })\n    // fetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\", {\n    // \tmethod: \"POST\",\n    // \tbody: JSON.stringify(ingredient),\n    // \theaders: { \"Content-Type\": \"application/json\" },\n    // })\n    // \t.then((response) => {\n    // \t\thttpdispatch({ type: \"SUCCESS\" })\n    // \t\treturn response.json()\n    // \t})\n    // \t.then((resData) => {\n    // \t\tdispatch({\n    // \t\t\ttype: \"ADD\",\n    // \t\t\tnewIngredient: {\n    // \t\t\t\tid: resData.name,\n    // \t\t\t\t...ingredient,\n    // \t\t\t},\n    // \t\t})\n    // \t})\n  }, []);\n  const removeIngredientHandler = React.useCallback(id => {// httpdispatch({ type: \"START\" })\n  }, []);\n  const clearError = React.useCallback(() => {// httpdispatch({ type: \"CLEAR\" })\n  }, []);\n  const ingredientList = useMemo(() => {\n    return /*#__PURE__*/React.createElement(IngredientList, {\n      onRemoveItem: removeIngredientHandler,\n      ingredients: ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 4\n      }\n    });\n  }, [ingredients, removeIngredientHandler]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(IngredientForm, {\n    onAdd: addIngredientHandler //\tloading={httpstate.loading}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onLoadIngredients: filteredIngredientsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }), ingredientList));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/React-Hooks/src/components/Ingredients/Ingredients.js"],"names":["React","useMemo","IngredientForm","IngredientList","ErrorModal","Search","useHttp","ingredientReducer","currentIngs","action","type","ingredients","newIngredient","filter","ing","id","Error","Ingredients","dispatch","useReducer","isLoading","error","data","sendRequest","useEffect","console","log","filteredIngredientsHandler","useCallback","filterIg","addIngredientHandler","ingredient","removeIngredientHandler","clearError","ingredientList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAClD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,KAAL;AACC,aAAOD,MAAM,CAACE,WAAd;;AACD,SAAK,KAAL;AACC,aAAO,CAAC,GAAGH,WAAJ,EAAiBC,MAAM,CAACG,aAAxB,CAAP;;AACD,SAAK,QAAL;AACC,aAAOJ,WAAW,CAACK,MAAZ,CAAoBC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAWN,MAAM,CAACM,EAA9C,CAAP;;AACD;AACC,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AARF;AAUA,CAXD;;AAcA,MAAMC,WAAW,GAAG,MAAM;AACzB,QAAM,CAACN,WAAD,EAAcO,QAAd,IAA0BlB,KAAK,CAACmB,UAAN,CAAiBZ,iBAAjB,EAAoC,EAApC,CAAhC;AACC,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA;AAA1B,MAA0CjB,OAAO,EAAvD;AACDN,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCf,WAArC;AACA,GAFD,EAEG,CAACA,WAAD,CAFH;AAIA,QAAMgB,0BAA0B,GAAG3B,KAAK,CAAC4B,WAAN,CAAmBC,QAAD,IAAc;AAClE;AACAX,IAAAA,QAAQ,CAAC;AACRR,MAAAA,IAAI,EAAE,KADE;AAERC,MAAAA,WAAW,EAAEkB;AAFL,KAAD,CAAR;AAIA,GANkC,EAMhC,EANgC,CAAnC;AAQA,QAAMC,oBAAoB,GAAG9B,KAAK,CAAC4B,WAAN,CAAmBG,UAAD,IAAgB,CAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GApB4B,EAoB1B,EApB0B,CAA7B;AAsBA,QAAMC,uBAAuB,GAAGhC,KAAK,CAAC4B,WAAN,CAAmBb,EAAD,IAAQ,CACzD;AACA,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,QAAMkB,UAAU,GAAGjC,KAAK,CAAC4B,WAAN,CAAkB,MAAM,CAC1C;AACA,GAFkB,EAEhB,EAFgB,CAAnB;AAIA,QAAMM,cAAc,GAAGjC,OAAO,CAAC,MAAM;AACpC,wBACC,oBAAC,cAAD;AACC,MAAA,YAAY,EAAE+B,uBADf;AAEC,MAAA,WAAW,EAAErB,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAMA,GAP6B,EAO3B,CAACA,WAAD,EAAcqB,uBAAd,CAP2B,CAA9B;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKC,oBAAC,cAAD;AACC,IAAA,KAAK,EAAEF,oBADR,CAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,eAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD;AAAQ,IAAA,iBAAiB,EAAEH,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEEO,cAFF,CAVD,CADD;AAiBA,CAvED;;AAyEA,eAAejB,WAAf","sourcesContent":["import React, { useMemo } from \"react\"\nimport IngredientForm from \"./IngredientForm\"\nimport IngredientList from \"./IngredientList\"\nimport ErrorModal from \"../UI/ErrorModal\"\nimport Search from \"./Search\"\nimport useHttp from '../../hooks/http'\n\nconst ingredientReducer = (currentIngs, action) => {\n\tswitch (action.type) {\n\t\tcase \"SET\":\n\t\t\treturn action.ingredients\n\t\tcase \"ADD\":\n\t\t\treturn [...currentIngs, action.newIngredient]\n\t\tcase \"DELETE\":\n\t\t\treturn currentIngs.filter((ing) => ing.id !== action.id)\n\t\tdefault:\n\t\t\tthrow new Error(\"Should not get there!\")\n\t}\n}\n\n\nconst Ingredients = () => {\n\tconst [ingredients, dispatch] = React.useReducer(ingredientReducer, [])\n  const { isLoading, error, data, sendRequest } = useHttp();\n\tReact.useEffect(() => {\n\t\tconsole.log(\"Rendering ingredients\", ingredients)\n\t}, [ingredients])\n\n\tconst filteredIngredientsHandler = React.useCallback((filterIg) => {\n\t\t// setIngredients(filterIg)\n\t\tdispatch({\n\t\t\ttype: \"SET\",\n\t\t\tingredients: filterIg,\n\t\t})\n\t}, [])\n\n\tconst addIngredientHandler = React.useCallback((ingredient) => {\n\t\t// httpdispatch({ type: \"START\" })\n\t\t// fetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\", {\n\t\t// \tmethod: \"POST\",\n\t\t// \tbody: JSON.stringify(ingredient),\n\t\t// \theaders: { \"Content-Type\": \"application/json\" },\n\t\t// })\n\t\t// \t.then((response) => {\n\t\t// \t\thttpdispatch({ type: \"SUCCESS\" })\n\t\t// \t\treturn response.json()\n\t\t// \t})\n\t\t// \t.then((resData) => {\n\t\t// \t\tdispatch({\n\t\t// \t\t\ttype: \"ADD\",\n\t\t// \t\t\tnewIngredient: {\n\t\t// \t\t\t\tid: resData.name,\n\t\t// \t\t\t\t...ingredient,\n\t\t// \t\t\t},\n\t\t// \t\t})\n\t\t// \t})\n\t}, [])\n\n\tconst removeIngredientHandler = React.useCallback((id) => {\n\t\t// httpdispatch({ type: \"START\" })\n\t}, [])\n\n\tconst clearError = React.useCallback(() => {\n\t\t// httpdispatch({ type: \"CLEAR\" })\n\t}, [])\n\n\tconst ingredientList = useMemo(() => {\n\t\treturn (\n\t\t\t<IngredientList\n\t\t\t\tonRemoveItem={removeIngredientHandler}\n\t\t\t\tingredients={ingredients}\n\t\t\t/>\n\t\t)\n\t}, [ingredients, removeIngredientHandler])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* {httpstate.error && (\n\t\t\t\t<ErrorModal onClose={clearError}>{httpstate.error}</ErrorModal> */}\n\t\t\t{/* )} */}\n\n\t\t\t<IngredientForm\n\t\t\t\tonAdd={addIngredientHandler}\n\t\t\t//\tloading={httpstate.loading}\n\t\t\t/>\n      \n\t\t\t<section>\n\t\t\t\t<Search onLoadIngredients={filteredIngredientsHandler} />\n\t\t\t\t{ingredientList}\n\t\t\t</section>\n\t\t</div>\n\t)\n}\n\nexport default Ingredients\n"]},"metadata":{},"sourceType":"module"}