{"ast":null,"code":"var _jsxFileName = \"/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/React-Hooks/src/components/Ingredients/Ingredients.js\";\nimport React from \"react\";\nimport IngredientForm from \"./IngredientForm\";\nimport IngredientList from \"./IngredientList\";\nimport Search from \"./Search\";\n\nconst Ingredients = props => {\n  const [ingredients, setIngredients] = React.useState([{\n    id: 3,\n    title: \"Banana\",\n    amount: 3\n  }, {\n    id: 2,\n    title: \"Apples\",\n    amount: 3\n  }, {\n    id: 5,\n    title: \"Oranges\",\n    amount: 5\n  }]);\n  React.useEffect(() => {\n    fetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\").then(response => response.json()).then(data => {\n      const loadedIngredients = [];\n\n      for (const key in data) {\n        loadedIngredients.push({\n          id: key,\n          title: data[key].title,\n          amount: data[key].amount\n        });\n      }\n\n      setIngredients(prevIngredients => [...prevIngredients, loadedIngredients.map(ingredients => ingredients)]);\n    });\n  }, []);\n\n  const addIngredientHandler = ingredient => {\n    fetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\", {\n      method: \"POST\",\n      body: JSON.stringify(ingredient),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(resData => {\n      setIngredients(prevIngredients => [...prevIngredients, {\n        id: resData.name,\n        ...ingredient\n      }]);\n    });\n  };\n\n  const removeIngredientHandler = id => {\n    let oldIngredients = [...ingredients];\n    oldIngredients.map(ig => {\n      if (ig.id === id) {\n        let ingredientIndex = oldIngredients.indexOf(ig);\n        return oldIngredients.splice(ingredientIndex, 1);\n      }\n    });\n    setIngredients([...oldIngredients]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(IngredientForm, {\n    onAdd: addIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(IngredientList, {\n    onRemoveItem: removeIngredientHandler,\n    ingredients: ingredients,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Users/brainilio/Desktop/Projects/Udemy_React_Course_2020_CodeStorage/React-Hooks/src/components/Ingredients/Ingredients.js"],"names":["React","IngredientForm","IngredientList","Search","Ingredients","props","ingredients","setIngredients","useState","id","title","amount","useEffect","fetch","then","response","json","data","loadedIngredients","key","push","prevIngredients","map","addIngredientHandler","ingredient","method","body","JSON","stringify","headers","resData","name","removeIngredientHandler","oldIngredients","ig","ingredientIndex","indexOf","splice"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport IngredientForm from \"./IngredientForm\"\nimport IngredientList from \"./IngredientList\"\nimport Search from \"./Search\"\n\nconst Ingredients = (props) => {\n\tconst [ingredients, setIngredients] = React.useState([\n\t\t{\n\t\t\tid: 3,\n\t\t\ttitle: \"Banana\",\n\t\t\tamount: 3,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: \"Apples\",\n\t\t\tamount: 3,\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\ttitle: \"Oranges\",\n\t\t\tamount: 5,\n\t\t},\n\t])\n\n\tReact.useEffect(() => {\n\t\tfetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tconst loadedIngredients = []\n\t\t\t\tfor (const key in data) {\n\t\t\t\t\tloadedIngredients.push({\n\t\t\t\t\t\tid: key,\n\t\t\t\t\t\ttitle: data[key].title,\n\t\t\t\t\t\tamount: data[key].amount,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tsetIngredients((prevIngredients) => [\n\t\t\t\t\t...prevIngredients,\n\t\t\t\t\tloadedIngredients.map((ingredients) => ingredients),\n\t\t\t\t])\n\t\t\t})\n\t}, [])\n\n\tconst addIngredientHandler = (ingredient) => {\n\t\tfetch(\"https://dummyproject-35081.firebaseio.com/ingredients.json\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(ingredient),\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((resData) => {\n\t\t\t\tsetIngredients((prevIngredients) => [\n\t\t\t\t\t...prevIngredients,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: resData.name,\n\t\t\t\t\t\t...ingredient,\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t})\n\t}\n\n\tconst removeIngredientHandler = (id) => {\n\t\tlet oldIngredients = [...ingredients]\n\t\toldIngredients.map((ig) => {\n\t\t\tif (ig.id === id) {\n\t\t\t\tlet ingredientIndex = oldIngredients.indexOf(ig)\n\t\t\t\treturn oldIngredients.splice(ingredientIndex, 1)\n\t\t\t}\n\t\t})\n\t\tsetIngredients([...oldIngredients])\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<IngredientForm onAdd={addIngredientHandler} />\n\n\t\t\t<section>\n\t\t\t\t<Search />\n\t\t\t\t<IngredientList\n\t\t\t\t\tonRemoveItem={removeIngredientHandler}\n\t\t\t\t\tingredients={ingredients}\n\t\t\t\t/>\n\t\t\t</section>\n\t\t</div>\n\t)\n}\n\nexport default Ingredients\n"]},"metadata":{},"sourceType":"module"}